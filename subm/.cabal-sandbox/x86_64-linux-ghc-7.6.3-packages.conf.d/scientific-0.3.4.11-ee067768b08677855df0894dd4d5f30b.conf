name: scientific
version: 0.3.4.11
id: scientific-0.3.4.11-ee067768b08677855df0894dd4d5f30b
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
             arbitrary precision and space efficient. They are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
             The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
             @e :: 'Int'@. A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             Note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision. I intend to change the type of the exponent
             to 'Integer' in a future release.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.ByteString.Builder.Scientific Data.Scientific
                 Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
trusted: False
import-dirs: /home/josh/Documents/LanguageEngineering/subm/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/scientific-0.3.4.11
library-dirs: /home/josh/Documents/LanguageEngineering/subm/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/scientific-0.3.4.11
hs-libraries: HSscientific-0.3.4.11
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57
         binary-0.5.1.1-72ed744c57c32286a49da6dda4f660b7
         bytestring-0.10.0.2-4f93248f75667c2c3321a7a6761b576f
         bytestring-builder-0.10.8.1.0-1bb4a4bdae91a5a05be2e2bfe3794816
         containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
         deepseq-1.3.0.1-5cc4cd89bdc2e8f6db1833d95ec36926
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.2.1.0-7e83190fbb1b0ba81d7022fa876f0f8b
         integer-gmp-0.5.0.0-2f15426f5b53fe4c6490832f9b20d8d7
         integer-logarithms-1.0.1-fceb1289306df3e774eae4cee13cab40
         text-0.11.3.1-e38859e86485c167fa7c9441789e7607
         vector-0.10.0.1-1fbb548bc492f07fef7e604d2e6f581d
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/josh/Documents/LanguageEngineering/subm/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/scientific-0.3.4.11/html/scientific.haddock
haddock-html: /home/josh/Documents/LanguageEngineering/subm/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/scientific-0.3.4.11/html
